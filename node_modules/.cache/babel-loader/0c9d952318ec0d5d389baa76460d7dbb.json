{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\swapDapp\\\\src\\\\components\\\\App.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\nimport Swap from '../abis/Swap.json';\nimport Token from '../abis/Token.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadUserData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadUserData\",\n    value: function () {\n      var _loadUserData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, ethBalance, networkId, tokenData, address, token, tokenBalance, swapData, swap;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.getBalance(this.state.account);\n\n              case 7:\n                ethBalance = _context3.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); //get smart contract abi's and addresses for frontend\n\n                _context3.next = 11;\n                return web3.eth.net.getId();\n\n              case 11:\n                networkId = _context3.sent;\n                //load token data\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                address = tokenData.address;\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                _context3.next = 19;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 19:\n                tokenBalance = _context3.sent;\n                //console.log(\"tokenBalance: \", tokenBalance.toString())\n                this.setState({\n                  tokenBalance: tokenBalance.toString()\n                });\n                _context3.next = 24;\n                break;\n\n              case 23:\n                window.alert(\"Contract not deployed to detected network\");\n\n              case 24:\n                //load swap data\n                swapData = Swap.networks[networkId];\n\n                if (swapData) {\n                  swap = new web3.eth.Contract(Swap.abi, swapData.address);\n                  this.setState({\n                    swap: swap\n                  });\n                } else {\n                  window.alert(\"Contract not deployed to detected network\");\n                } //console.log(this.state.swap)\n\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadUserData() {\n        return _loadUserData.apply(this, arguments);\n      }\n\n      return loadUserData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      token: {},\n      swap: {},\n      ethBalance: '0',\n      tokenBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      var loading = false;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Loading data...\");\n      } else {\n        content = React.createElement(Main, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Nick\\Documents\\GitHub\\swapDapp\\src\\components\\App.js"],"names":["React","Component","useState","useEffect","logo","Swap","Token","Navbar","Main","Web3","App","loadWeb3","loadUserData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","address","token","Contract","abi","methods","balanceOf","call","tokenBalance","toString","swapData","swap","props","loading","content"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\r\nimport logo from '../logo.png'\r\nimport './App.css'\r\nimport Swap from '../abis/Swap.json'\r\nimport Token from '../abis/Token.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3'\r\n\r\nclass App extends Component {\r\n\r\n\tasync componentWillMount() {\r\n\t\tawait this.loadWeb3()\r\n\t\tawait this.loadUserData()\r\n\t}\r\n\r\n\tasync loadWeb3() {\r\n\t\tif (window.ethereum) {\r\n\t\t\twindow.web3 = new Web3(window.ethereum)\r\n\t\t\tawait window.ethereum.enable()\r\n\t\t}\r\n\t\telse if (window.web3) {\r\n\t\t\twindow.web3 = new Web3(window.web3.currentProvider)\r\n\t\t}\r\n\t\telse {\r\n\t\t\twindow.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n\t\t}\r\n\t}\r\n\r\n\tasync loadUserData() {\r\n\t\tconst web3 = window.web3\r\n\t\tconst accounts = await web3.eth.getAccounts()\r\n\t\tthis.setState({ account: accounts[0]})\r\n\r\n\t\tconst ethBalance = await web3.eth.getBalance(this.state.account)\r\n\t\tthis.setState({ ethBalance: ethBalance })\r\n\r\n\t\t//get smart contract abi's and addresses for frontend\r\n\t\tconst networkId = await web3.eth.net.getId()\r\n\t\t//load token data\r\n\r\n\t\tconst tokenData = Token.networks[networkId]\r\n\t\tif (tokenData) {\r\n\t\t\tconst address = tokenData.address\r\n\t\t\tconst token = new web3.eth.Contract(Token.abi, tokenData.address)\r\n\t\t\tthis.setState({ token })\r\n\t\t\tlet tokenBalance = await token.methods.balanceOf(this.state.account).call()\r\n\t\t\t//console.log(\"tokenBalance: \", tokenBalance.toString())\r\n\t\t\tthis.setState({ tokenBalance: tokenBalance.toString() })\r\n\t\t} else {\r\n\t\t\twindow.alert(\"Contract not deployed to detected network\")\r\n\t\t}\r\n\r\n\t\t//load swap data\r\n\t\tconst swapData = Swap.networks[networkId]\r\n\t\tif (swapData) {\r\n\t\t\tconst swap = new web3.eth.Contract(Swap.abi, swapData.address)\r\n\t\t\tthis.setState({ swap })\r\n\t\t} else {\r\n\t\t\twindow.alert(\"Contract not deployed to detected network\")\r\n\t\t}\r\n\r\n\t\t//console.log(this.state.swap)\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\taccount: '',\r\n\t\t\ttoken: {},\r\n\t\t\tswap: {},\r\n\t\t\tethBalance: '0',\r\n\t\t\ttokenBalance: '0',\r\n\t\t\tloading: true\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet content\r\n\t\tlet loading = false\r\n\t\tif (this.state.loading) {\r\n\t\t\tcontent = <p id=\"loader\" className=\"text-center\">Loading data...</p>\r\n\t\t} else {\r\n\t\t\tcontent = <Main />\r\n        }\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Navbar account={this.state.account} />\r\n\t\t\t<div className=\"container-fluid mt-5\">\r\n\t\t\t  <div className=\"row\">\r\n\t\t\t\t<main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n\t\t\t\t  <div className=\"content mr-auto ml-auto\">\r\n\t\t\t\t\t\t\t{content}\r\n\t\t\t\t  </div>\r\n\t\t\t\t</main>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}